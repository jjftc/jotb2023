"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const odbc = require("../lib/node-odbc");
const mod = require("./module");
const os = require("os");
let cpus = os.cpus().length;
function fCreateTable(con) {
    return __awaiter(this, void 0, void 0, function* () {
        yield con.prepareQuery("CREATE TABLE tblMassInsert( a int, b int, c int )").toSingle();
    });
}
mod.connection.forEach((con) => {
    describe(`pool test - ${con.name}`, () => {
        it('massive insert', (done) => __awaiter(this, void 0, void 0, function* () {
            let _con = new odbc.Connection()
                .connect(con.connectionString);
            yield fCreateTable(_con);
            for (var i = 0; i < cpus * 200; i++) {
                _con.executeQuery(0 /* eSingle */, (res, err) => {
                    if (err != null) {
                        done(new Error("query failed!"));
                    }
                    else {
                        if (i == ((cpus * 200) - 1)) {
                            done();
                        }
                    }
                }, "INSERT INTO tblMassInsert( a, b, c ) VALUES( ?, ?, ? )", Math.floor(Math.random() * 25), Math.floor(Math.random() * 30), Math.floor(Math.random() * 45));
            }
        }));
    });
});
