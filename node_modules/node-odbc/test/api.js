"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const odbc = require("../lib/node-odbc");
const bluebird = require("bluebird");
const mod = require("./module");
describe("api tests - connection", () => {
    it("constructor: non new cast", () => {
        assert.doesNotThrow(() => {
            odbc.Connection();
        });
    });
    it("constructor: new cast", () => {
        assert.doesNotThrow(() => {
            new odbc.Connection();
        });
    });
    it("constructor: too many arguments", () => {
        assert.throws(() => {
            new odbc.Connection(25, true, false, null, undefined);
        });
    });
    it("constructor: invalid parameter", () => {
        assert.throws(() => {
            new odbc.Connection(2552);
        });
    });
    it("constructor: valid connection props", () => {
        assert.doesNotThrow(() => {
            new odbc.Connection({ enableMssqlMars: true, poolSize: 128 });
        });
    });
    it("constructor: invalid connection props", () => {
        assert.doesNotThrow(() => {
            new odbc.Connection({ noenable: false });
        });
    });
    it("constructor: invalid connection props(empty)", () => {
        assert.doesNotThrow(() => {
            new odbc.Connection({});
        });
    });
    it("constructor: invalid connection props (invalid param A)", () => {
        assert.throws(() => {
            new odbc.Connection({ enableMssqlMars: "asdsad" });
        });
    });
    it("constructor: invalid connection props (invalid param B)", () => {
        assert.throws(() => {
            new odbc.Connection({ enableMssqlMars: true, poolSize: true });
        });
    });
    //it( "setResilienceStrategy - invalid parameter", () =>
    //{
    //	assert.throws(() =>
    //	{
    //		new odbc.Connection()
    //			.setResilienceStrategy(( <any>( undefined ) ) );
    //	} );
    //} );
    //it( "setResilienceStrategy - no parameter", () =>
    //{
    //	assert.throws(() =>
    //	{
    //		new odbc.Connection()
    //			.setResilienceStrategy( <any>{ noretries: false } );
    //	} );
    //} );
    //it( "setResilienceStrategy - valid parameter A", () =>
    //{
    //	assert.throws(() =>
    //	{
    //		new odbc.Connection()
    //			.setResilienceStrategy( <any>{ retries: 25, errorCodes: undefined } );
    //	} );
    //} );
    //it( "setResilienceStrategy - valid parameter B", () =>
    //{
    //	assert.throws(() =>
    //	{
    //		new odbc.Connection()
    //			.setResilienceStrategy( <any>{ retries: false, errorCodes: [25, 30] } );
    //	} );
    //} );
    //it( "setResilienceStrategy - valid parameters", () =>
    //{
    //	assert.doesNotThrow(() =>
    //	{
    //		new odbc.Connection()
    //			.setResilienceStrategy( { retries: 5, errorCodes: [128, 40005, 23] } );
    //	} );
    //} );
    //it( "setResilienceStrategy - invalid array parameters", () =>
    //{
    //	assert.throws(() =>
    //	{
    //		new odbc.Connection()
    //			.setResilienceStrategy( <any>{ retries: 5, errorCodes: [128, undefined, 40005, "asdasd", 23] } );
    //	} );
    //} );
    it("connect - too many arguments", () => {
        assert.throws(() => {
            new odbc.Connection()
                .connect(null, 123123, false, true, undefined);
        });
    });
    it("connect - wrong parameter type A", () => {
        assert.throws(() => {
            new odbc.Connection()
                .connect(false);
        });
    });
    it("connect - wrong parameter type B", () => {
        assert.throws(() => {
            new odbc.Connection()
                .connect("test", false);
        });
    });
    it("connect - double connect", () => {
        assert.throws(() => {
            new odbc.Connection()
                .connect("test", 25)
                .connect("test1", 45);
        });
    });
    it("connect - valid parameters (invalid connectionString)", (done) => {
        try {
            new odbc.Connection()
                .connect("HelloWorld", 15);
        }
        catch (err) {
            if (typeof (err.message) === "string" &&
                typeof (err.sqlState) === "string" &&
                typeof (err.code) === "number") {
                if (err.sqlState === "IM002") {
                    done();
                    return;
                }
                done();
            }
            console.log(`${err.message}, ${err.sqlState}, ${err.code}`);
            done(err);
        }
    });
    it("disconnect - invalid pool state", () => {
        assert.throws(() => {
            new odbc.Connection()
                .disconnect(() => { });
        });
    });
    it("disconnect - invalid parameter", () => {
        assert.throws(() => {
            new odbc.Connection()
                .disconnect(null);
        });
    });
    it("disconnect - too many arguments", () => {
        assert.throws(() => {
            new odbc.Connection()
                .disconnect(true, false, undefined);
        });
    });
    it("prepareQuery - not connected", () => {
        assert.throws(() => {
            new odbc.Connection()
                .prepareQuery("asdf");
        });
    });
    it("prepareQuery - invalid parameter A", () => {
        assert.throws(() => {
            new odbc.Connection()
                .prepareQuery(undefined);
        });
    });
    it("executeQuery - invalid fetch mode", () => {
        assert.throws(() => {
            new odbc.Connection()
                .executeQuery("hello world", (res, err) => { }, "");
        });
    });
    it("executeQuery - invalid parameter 2", () => {
        assert.throws(() => {
            new odbc.Connection()
                .executeQuery(0 /* eSingle */, undefined, "hello world");
        });
    });
    it("executeQuery - not connected", () => {
        assert.throws(() => {
            new odbc.Connection()
                .executeQuery(0 /* eSingle */, (res, err) => { }, "");
        });
    });
    it("getInfo - not connected", () => {
        assert.throws(() => {
            new odbc.Connection()
                .getInfo();
        });
    });
});
describe("api tests - internal", () => {
    afterEach(() => {
        assert.doesNotThrow(() => {
            odbc.setWriteStreamInitializer((targetStream, query) => {
                let writer = new mod.SqlStreamWriter(query);
                targetStream.pipe(writer);
            });
        });
        assert.doesNotThrow(() => {
            odbc.setReadStreamInitializer((query, column) => {
                return new mod.SqlStreamReader(query, column);
            });
        });
        assert.doesNotThrow(() => {
            odbc.setPromiseInitializer((query) => {
                return new bluebird((resolve, reject) => {
                    query.setPromiseInfo(resolve, reject);
                });
            });
        });
    });
    it("setWriteStreamInitializer - invalid param", () => {
        assert.throws(() => {
            odbc.setWriteStreamInitializer(undefined);
        });
    });
    it("setWriteStreamInitializer - set", () => {
        assert.doesNotThrow(() => {
            odbc.setWriteStreamInitializer(() => {
                console.log("Hello World!");
            });
        });
    });
    it("setReadStreamInitializer - invalid param", () => {
        assert.throws(() => {
            odbc.setReadStreamInitializer(false);
        });
    });
    it("setReadStreamInitializer - set", () => {
        assert.doesNotThrow(() => {
            odbc.setReadStreamInitializer(() => {
                console.log("Awww yeah!");
                return null;
            });
        });
    });
    it("setPromiseInitializer - invalid param", () => {
        assert.throws(() => {
            odbc.setPromiseInitializer(null);
        });
    });
    it("setPromiseInitializer - set", () => {
        assert.doesNotThrow(() => {
            odbc.setPromiseInitializer(() => {
                console.log("yay");
            });
        });
    });
});
