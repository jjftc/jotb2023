"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stream = require("stream");
let confPath;
if (process.env.NODE_ODBC_TEST_USE_APPVEYOR_CONFIG) {
    confPath = "./dbconf.appveyor.json";
}
else {
    confPath = "./dbconf.json";
}
console.log(`dbconf ${confPath}`);
var dbconf = require(confPath);
exports.connection = dbconf.Connections;
class SqlStreamReader extends stream.Readable {
    constructor(_query, _column) {
        super();
        this.query = _query;
        this.column = _column;
    }
    _read() {
        exports.requestNextChunk(this.query, this.column, (chunk) => {
            this.push(chunk);
        });
    }
}
exports.SqlStreamReader = SqlStreamReader;
class SqlStreamWriter extends stream.Writable {
    constructor(query) {
        super();
        this._query = query;
    }
    _write(chunk, encoding, next) {
        exports.processNextChunk(this._query, chunk, (error) => {
            next(error);
        });
    }
}
exports.SqlStreamWriter = SqlStreamWriter;
function getRandomTableName(length) {
    let len = length || 7;
    return "tbl" + getRandomString(len);
}
exports.getRandomTableName = getRandomTableName;
function getRandomString(length) {
    let possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let text = "";
    for (var i = 0; i < length; i++) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
}
exports.getRandomString = getRandomString;
function getRandomInt(scale, min) {
    return Math.floor((Math.random() * scale) + min);
}
exports.getRandomInt = getRandomInt;
